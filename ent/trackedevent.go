// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Sadzeih/valcompbot/ent/trackedevent"
	"github.com/google/uuid"
)

// TrackedEvent is the model entity for the TrackedEvent schema.
type TrackedEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID int `json:"event_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TrackedEvent) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case trackedevent.FieldEventID:
			values[i] = new(sql.NullInt64)
		case trackedevent.FieldName:
			values[i] = new(sql.NullString)
		case trackedevent.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TrackedEvent", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TrackedEvent fields.
func (te *TrackedEvent) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trackedevent.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				te.ID = *value
			}
		case trackedevent.FieldEventID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				te.EventID = int(value.Int64)
			}
		case trackedevent.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				te.Name = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TrackedEvent.
// Note that you need to call TrackedEvent.Unwrap() before calling this method if this TrackedEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (te *TrackedEvent) Update() *TrackedEventUpdateOne {
	return (&TrackedEventClient{config: te.config}).UpdateOne(te)
}

// Unwrap unwraps the TrackedEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (te *TrackedEvent) Unwrap() *TrackedEvent {
	_tx, ok := te.config.driver.(*txDriver)
	if !ok {
		panic("ent: TrackedEvent is not a transactional entity")
	}
	te.config.driver = _tx.drv
	return te
}

// String implements the fmt.Stringer.
func (te *TrackedEvent) String() string {
	var builder strings.Builder
	builder.WriteString("TrackedEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", te.ID))
	builder.WriteString("event_id=")
	builder.WriteString(fmt.Sprintf("%v", te.EventID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(te.Name)
	builder.WriteByte(')')
	return builder.String()
}

// TrackedEvents is a parsable slice of TrackedEvent.
type TrackedEvents []*TrackedEvent

func (te TrackedEvents) config(cfg config) {
	for _i := range te {
		te[_i].config = cfg
	}
}
