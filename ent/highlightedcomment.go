// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Sadzeih/valcompbot/ent/highlightedcomment"
	"github.com/google/uuid"
)

// HighlightedComment is the model entity for the HighlightedComment schema.
type HighlightedComment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CommentID holds the value of the "comment_id" field.
	CommentID string `json:"comment_id,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// Author holds the value of the "author" field.
	Author string `json:"author,omitempty"`
	// AuthorRole holds the value of the "author_role" field.
	AuthorRole string `json:"author_role,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	ParentID string `json:"parent_id,omitempty"`
	// Link holds the value of the "link" field.
	Link string `json:"link,omitempty"`
	// AuthorType holds the value of the "author_type" field.
	AuthorType string `json:"author_type,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HighlightedComment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case highlightedcomment.FieldCommentID, highlightedcomment.FieldBody, highlightedcomment.FieldAuthor, highlightedcomment.FieldAuthorRole, highlightedcomment.FieldParentID, highlightedcomment.FieldLink, highlightedcomment.FieldAuthorType:
			values[i] = new(sql.NullString)
		case highlightedcomment.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type HighlightedComment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HighlightedComment fields.
func (hc *HighlightedComment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case highlightedcomment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				hc.ID = *value
			}
		case highlightedcomment.FieldCommentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment_id", values[i])
			} else if value.Valid {
				hc.CommentID = value.String
			}
		case highlightedcomment.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				hc.Body = value.String
			}
		case highlightedcomment.FieldAuthor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				hc.Author = value.String
			}
		case highlightedcomment.FieldAuthorRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_role", values[i])
			} else if value.Valid {
				hc.AuthorRole = value.String
			}
		case highlightedcomment.FieldParentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				hc.ParentID = value.String
			}
		case highlightedcomment.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				hc.Link = value.String
			}
		case highlightedcomment.FieldAuthorType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_type", values[i])
			} else if value.Valid {
				hc.AuthorType = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this HighlightedComment.
// Note that you need to call HighlightedComment.Unwrap() before calling this method if this HighlightedComment
// was returned from a transaction, and the transaction was committed or rolled back.
func (hc *HighlightedComment) Update() *HighlightedCommentUpdateOne {
	return (&HighlightedCommentClient{config: hc.config}).UpdateOne(hc)
}

// Unwrap unwraps the HighlightedComment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hc *HighlightedComment) Unwrap() *HighlightedComment {
	_tx, ok := hc.config.driver.(*txDriver)
	if !ok {
		panic("ent: HighlightedComment is not a transactional entity")
	}
	hc.config.driver = _tx.drv
	return hc
}

// String implements the fmt.Stringer.
func (hc *HighlightedComment) String() string {
	var builder strings.Builder
	builder.WriteString("HighlightedComment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hc.ID))
	builder.WriteString("comment_id=")
	builder.WriteString(hc.CommentID)
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(hc.Body)
	builder.WriteString(", ")
	builder.WriteString("author=")
	builder.WriteString(hc.Author)
	builder.WriteString(", ")
	builder.WriteString("author_role=")
	builder.WriteString(hc.AuthorRole)
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(hc.ParentID)
	builder.WriteString(", ")
	builder.WriteString("link=")
	builder.WriteString(hc.Link)
	builder.WriteString(", ")
	builder.WriteString("author_type=")
	builder.WriteString(hc.AuthorType)
	builder.WriteByte(')')
	return builder.String()
}

// HighlightedComments is a parsable slice of HighlightedComment.
type HighlightedComments []*HighlightedComment

func (hc HighlightedComments) config(cfg config) {
	for _i := range hc {
		hc[_i].config = cfg
	}
}
