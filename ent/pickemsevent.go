// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Sadzeih/valcompbot/ent/pickemsevent"
	"github.com/google/uuid"
)

// PickemsEvent is the model entity for the PickemsEvent schema.
type PickemsEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID *int `json:"event_id,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp    time.Time `json:"timestamp,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PickemsEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pickemsevent.FieldEventID:
			values[i] = new(sql.NullInt64)
		case pickemsevent.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case pickemsevent.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PickemsEvent fields.
func (pe *PickemsEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pickemsevent.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pe.ID = *value
			}
		case pickemsevent.FieldEventID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				pe.EventID = new(int)
				*pe.EventID = int(value.Int64)
			}
		case pickemsevent.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				pe.Timestamp = value.Time
			}
		default:
			pe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PickemsEvent.
// This includes values selected through modifiers, order, etc.
func (pe *PickemsEvent) Value(name string) (ent.Value, error) {
	return pe.selectValues.Get(name)
}

// Update returns a builder for updating this PickemsEvent.
// Note that you need to call PickemsEvent.Unwrap() before calling this method if this PickemsEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *PickemsEvent) Update() *PickemsEventUpdateOne {
	return NewPickemsEventClient(pe.config).UpdateOne(pe)
}

// Unwrap unwraps the PickemsEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *PickemsEvent) Unwrap() *PickemsEvent {
	_tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: PickemsEvent is not a transactional entity")
	}
	pe.config.driver = _tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *PickemsEvent) String() string {
	var builder strings.Builder
	builder.WriteString("PickemsEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pe.ID))
	if v := pe.EventID; v != nil {
		builder.WriteString("event_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(pe.Timestamp.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PickemsEvents is a parsable slice of PickemsEvent.
type PickemsEvents []*PickemsEvent
