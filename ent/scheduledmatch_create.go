// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Sadzeih/valcompbot/ent/scheduledmatch"
	"github.com/Sadzeih/valcompbot/ent/trackedevent"
	"github.com/google/uuid"
)

// ScheduledMatchCreate is the builder for creating a ScheduledMatch entity.
type ScheduledMatchCreate struct {
	config
	mutation *ScheduledMatchMutation
	hooks    []Hook
}

// SetMatchID sets the "match_id" field.
func (smc *ScheduledMatchCreate) SetMatchID(s string) *ScheduledMatchCreate {
	smc.mutation.SetMatchID(s)
	return smc
}

// SetDoneAt sets the "done_at" field.
func (smc *ScheduledMatchCreate) SetDoneAt(t time.Time) *ScheduledMatchCreate {
	smc.mutation.SetDoneAt(t)
	return smc
}

// SetNillableDoneAt sets the "done_at" field if the given value is not nil.
func (smc *ScheduledMatchCreate) SetNillableDoneAt(t *time.Time) *ScheduledMatchCreate {
	if t != nil {
		smc.SetDoneAt(*t)
	}
	return smc
}

// SetPostedAt sets the "posted_at" field.
func (smc *ScheduledMatchCreate) SetPostedAt(t time.Time) *ScheduledMatchCreate {
	smc.mutation.SetPostedAt(t)
	return smc
}

// SetNillablePostedAt sets the "posted_at" field if the given value is not nil.
func (smc *ScheduledMatchCreate) SetNillablePostedAt(t *time.Time) *ScheduledMatchCreate {
	if t != nil {
		smc.SetPostedAt(*t)
	}
	return smc
}

// SetID sets the "id" field.
func (smc *ScheduledMatchCreate) SetID(u uuid.UUID) *ScheduledMatchCreate {
	smc.mutation.SetID(u)
	return smc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (smc *ScheduledMatchCreate) SetNillableID(u *uuid.UUID) *ScheduledMatchCreate {
	if u != nil {
		smc.SetID(*u)
	}
	return smc
}

// SetEventID sets the "event" edge to the TrackedEvent entity by ID.
func (smc *ScheduledMatchCreate) SetEventID(id uuid.UUID) *ScheduledMatchCreate {
	smc.mutation.SetEventID(id)
	return smc
}

// SetEvent sets the "event" edge to the TrackedEvent entity.
func (smc *ScheduledMatchCreate) SetEvent(t *TrackedEvent) *ScheduledMatchCreate {
	return smc.SetEventID(t.ID)
}

// Mutation returns the ScheduledMatchMutation object of the builder.
func (smc *ScheduledMatchCreate) Mutation() *ScheduledMatchMutation {
	return smc.mutation
}

// Save creates the ScheduledMatch in the database.
func (smc *ScheduledMatchCreate) Save(ctx context.Context) (*ScheduledMatch, error) {
	smc.defaults()
	return withHooks(ctx, smc.sqlSave, smc.mutation, smc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (smc *ScheduledMatchCreate) SaveX(ctx context.Context) *ScheduledMatch {
	v, err := smc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smc *ScheduledMatchCreate) Exec(ctx context.Context) error {
	_, err := smc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smc *ScheduledMatchCreate) ExecX(ctx context.Context) {
	if err := smc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smc *ScheduledMatchCreate) defaults() {
	if _, ok := smc.mutation.ID(); !ok {
		v := scheduledmatch.DefaultID()
		smc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smc *ScheduledMatchCreate) check() error {
	if _, ok := smc.mutation.MatchID(); !ok {
		return &ValidationError{Name: "match_id", err: errors.New(`ent: missing required field "ScheduledMatch.match_id"`)}
	}
	if len(smc.mutation.EventIDs()) == 0 {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required edge "ScheduledMatch.event"`)}
	}
	return nil
}

func (smc *ScheduledMatchCreate) sqlSave(ctx context.Context) (*ScheduledMatch, error) {
	if err := smc.check(); err != nil {
		return nil, err
	}
	_node, _spec := smc.createSpec()
	if err := sqlgraph.CreateNode(ctx, smc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	smc.mutation.id = &_node.ID
	smc.mutation.done = true
	return _node, nil
}

func (smc *ScheduledMatchCreate) createSpec() (*ScheduledMatch, *sqlgraph.CreateSpec) {
	var (
		_node = &ScheduledMatch{config: smc.config}
		_spec = sqlgraph.NewCreateSpec(scheduledmatch.Table, sqlgraph.NewFieldSpec(scheduledmatch.FieldID, field.TypeUUID))
	)
	if id, ok := smc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := smc.mutation.MatchID(); ok {
		_spec.SetField(scheduledmatch.FieldMatchID, field.TypeString, value)
		_node.MatchID = value
	}
	if value, ok := smc.mutation.DoneAt(); ok {
		_spec.SetField(scheduledmatch.FieldDoneAt, field.TypeTime, value)
		_node.DoneAt = &value
	}
	if value, ok := smc.mutation.PostedAt(); ok {
		_spec.SetField(scheduledmatch.FieldPostedAt, field.TypeTime, value)
		_node.PostedAt = &value
	}
	if nodes := smc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledmatch.EventTable,
			Columns: []string{scheduledmatch.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trackedevent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.tracked_event_scheduledmatches = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScheduledMatchCreateBulk is the builder for creating many ScheduledMatch entities in bulk.
type ScheduledMatchCreateBulk struct {
	config
	err      error
	builders []*ScheduledMatchCreate
}

// Save creates the ScheduledMatch entities in the database.
func (smcb *ScheduledMatchCreateBulk) Save(ctx context.Context) ([]*ScheduledMatch, error) {
	if smcb.err != nil {
		return nil, smcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(smcb.builders))
	nodes := make([]*ScheduledMatch, len(smcb.builders))
	mutators := make([]Mutator, len(smcb.builders))
	for i := range smcb.builders {
		func(i int, root context.Context) {
			builder := smcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScheduledMatchMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, smcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, smcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, smcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (smcb *ScheduledMatchCreateBulk) SaveX(ctx context.Context) []*ScheduledMatch {
	v, err := smcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smcb *ScheduledMatchCreateBulk) Exec(ctx context.Context) error {
	_, err := smcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smcb *ScheduledMatchCreateBulk) ExecX(ctx context.Context) {
	if err := smcb.Exec(ctx); err != nil {
		panic(err)
	}
}
