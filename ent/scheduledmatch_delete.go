// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Sadzeih/valcompbot/ent/predicate"
	"github.com/Sadzeih/valcompbot/ent/scheduledmatch"
)

// ScheduledMatchDelete is the builder for deleting a ScheduledMatch entity.
type ScheduledMatchDelete struct {
	config
	hooks    []Hook
	mutation *ScheduledMatchMutation
}

// Where appends a list predicates to the ScheduledMatchDelete builder.
func (smd *ScheduledMatchDelete) Where(ps ...predicate.ScheduledMatch) *ScheduledMatchDelete {
	smd.mutation.Where(ps...)
	return smd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (smd *ScheduledMatchDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, smd.sqlExec, smd.mutation, smd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (smd *ScheduledMatchDelete) ExecX(ctx context.Context) int {
	n, err := smd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (smd *ScheduledMatchDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(scheduledmatch.Table, sqlgraph.NewFieldSpec(scheduledmatch.FieldID, field.TypeUUID))
	if ps := smd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, smd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	smd.mutation.done = true
	return affected, err
}

// ScheduledMatchDeleteOne is the builder for deleting a single ScheduledMatch entity.
type ScheduledMatchDeleteOne struct {
	smd *ScheduledMatchDelete
}

// Where appends a list predicates to the ScheduledMatchDelete builder.
func (smdo *ScheduledMatchDeleteOne) Where(ps ...predicate.ScheduledMatch) *ScheduledMatchDeleteOne {
	smdo.smd.mutation.Where(ps...)
	return smdo
}

// Exec executes the deletion query.
func (smdo *ScheduledMatchDeleteOne) Exec(ctx context.Context) error {
	n, err := smdo.smd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{scheduledmatch.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (smdo *ScheduledMatchDeleteOne) ExecX(ctx context.Context) {
	if err := smdo.Exec(ctx); err != nil {
		panic(err)
	}
}
