// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Sadzeih/valcompbot/ent/highlightedcomment"
	"github.com/Sadzeih/valcompbot/ent/predicate"
)

// HighlightedCommentUpdate is the builder for updating HighlightedComment entities.
type HighlightedCommentUpdate struct {
	config
	hooks    []Hook
	mutation *HighlightedCommentMutation
}

// Where appends a list predicates to the HighlightedCommentUpdate builder.
func (hcu *HighlightedCommentUpdate) Where(ps ...predicate.HighlightedComment) *HighlightedCommentUpdate {
	hcu.mutation.Where(ps...)
	return hcu
}

// SetCommentID sets the "comment_id" field.
func (hcu *HighlightedCommentUpdate) SetCommentID(s string) *HighlightedCommentUpdate {
	hcu.mutation.SetCommentID(s)
	return hcu
}

// SetBody sets the "body" field.
func (hcu *HighlightedCommentUpdate) SetBody(s string) *HighlightedCommentUpdate {
	hcu.mutation.SetBody(s)
	return hcu
}

// SetAuthor sets the "author" field.
func (hcu *HighlightedCommentUpdate) SetAuthor(s string) *HighlightedCommentUpdate {
	hcu.mutation.SetAuthor(s)
	return hcu
}

// SetFlair sets the "flair" field.
func (hcu *HighlightedCommentUpdate) SetFlair(s string) *HighlightedCommentUpdate {
	hcu.mutation.SetFlair(s)
	return hcu
}

// SetParentID sets the "parent_id" field.
func (hcu *HighlightedCommentUpdate) SetParentID(s string) *HighlightedCommentUpdate {
	hcu.mutation.SetParentID(s)
	return hcu
}

// SetLink sets the "link" field.
func (hcu *HighlightedCommentUpdate) SetLink(s string) *HighlightedCommentUpdate {
	hcu.mutation.SetLink(s)
	return hcu
}

// SetAuthorType sets the "author_type" field.
func (hcu *HighlightedCommentUpdate) SetAuthorType(s string) *HighlightedCommentUpdate {
	hcu.mutation.SetAuthorType(s)
	return hcu
}

// SetTimestamp sets the "timestamp" field.
func (hcu *HighlightedCommentUpdate) SetTimestamp(t time.Time) *HighlightedCommentUpdate {
	hcu.mutation.SetTimestamp(t)
	return hcu
}

// Mutation returns the HighlightedCommentMutation object of the builder.
func (hcu *HighlightedCommentUpdate) Mutation() *HighlightedCommentMutation {
	return hcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hcu *HighlightedCommentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(hcu.hooks) == 0 {
		affected, err = hcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HighlightedCommentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			hcu.mutation = mutation
			affected, err = hcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hcu.hooks) - 1; i >= 0; i-- {
			if hcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hcu *HighlightedCommentUpdate) SaveX(ctx context.Context) int {
	affected, err := hcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hcu *HighlightedCommentUpdate) Exec(ctx context.Context) error {
	_, err := hcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcu *HighlightedCommentUpdate) ExecX(ctx context.Context) {
	if err := hcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hcu *HighlightedCommentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   highlightedcomment.Table,
			Columns: highlightedcomment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: highlightedcomment.FieldID,
			},
		},
	}
	if ps := hcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hcu.mutation.CommentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: highlightedcomment.FieldCommentID,
		})
	}
	if value, ok := hcu.mutation.Body(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: highlightedcomment.FieldBody,
		})
	}
	if value, ok := hcu.mutation.Author(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: highlightedcomment.FieldAuthor,
		})
	}
	if value, ok := hcu.mutation.Flair(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: highlightedcomment.FieldFlair,
		})
	}
	if value, ok := hcu.mutation.ParentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: highlightedcomment.FieldParentID,
		})
	}
	if value, ok := hcu.mutation.Link(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: highlightedcomment.FieldLink,
		})
	}
	if value, ok := hcu.mutation.AuthorType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: highlightedcomment.FieldAuthorType,
		})
	}
	if value, ok := hcu.mutation.Timestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: highlightedcomment.FieldTimestamp,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{highlightedcomment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// HighlightedCommentUpdateOne is the builder for updating a single HighlightedComment entity.
type HighlightedCommentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HighlightedCommentMutation
}

// SetCommentID sets the "comment_id" field.
func (hcuo *HighlightedCommentUpdateOne) SetCommentID(s string) *HighlightedCommentUpdateOne {
	hcuo.mutation.SetCommentID(s)
	return hcuo
}

// SetBody sets the "body" field.
func (hcuo *HighlightedCommentUpdateOne) SetBody(s string) *HighlightedCommentUpdateOne {
	hcuo.mutation.SetBody(s)
	return hcuo
}

// SetAuthor sets the "author" field.
func (hcuo *HighlightedCommentUpdateOne) SetAuthor(s string) *HighlightedCommentUpdateOne {
	hcuo.mutation.SetAuthor(s)
	return hcuo
}

// SetFlair sets the "flair" field.
func (hcuo *HighlightedCommentUpdateOne) SetFlair(s string) *HighlightedCommentUpdateOne {
	hcuo.mutation.SetFlair(s)
	return hcuo
}

// SetParentID sets the "parent_id" field.
func (hcuo *HighlightedCommentUpdateOne) SetParentID(s string) *HighlightedCommentUpdateOne {
	hcuo.mutation.SetParentID(s)
	return hcuo
}

// SetLink sets the "link" field.
func (hcuo *HighlightedCommentUpdateOne) SetLink(s string) *HighlightedCommentUpdateOne {
	hcuo.mutation.SetLink(s)
	return hcuo
}

// SetAuthorType sets the "author_type" field.
func (hcuo *HighlightedCommentUpdateOne) SetAuthorType(s string) *HighlightedCommentUpdateOne {
	hcuo.mutation.SetAuthorType(s)
	return hcuo
}

// SetTimestamp sets the "timestamp" field.
func (hcuo *HighlightedCommentUpdateOne) SetTimestamp(t time.Time) *HighlightedCommentUpdateOne {
	hcuo.mutation.SetTimestamp(t)
	return hcuo
}

// Mutation returns the HighlightedCommentMutation object of the builder.
func (hcuo *HighlightedCommentUpdateOne) Mutation() *HighlightedCommentMutation {
	return hcuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hcuo *HighlightedCommentUpdateOne) Select(field string, fields ...string) *HighlightedCommentUpdateOne {
	hcuo.fields = append([]string{field}, fields...)
	return hcuo
}

// Save executes the query and returns the updated HighlightedComment entity.
func (hcuo *HighlightedCommentUpdateOne) Save(ctx context.Context) (*HighlightedComment, error) {
	var (
		err  error
		node *HighlightedComment
	)
	if len(hcuo.hooks) == 0 {
		node, err = hcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HighlightedCommentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			hcuo.mutation = mutation
			node, err = hcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(hcuo.hooks) - 1; i >= 0; i-- {
			if hcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hcuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, hcuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*HighlightedComment)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from HighlightedCommentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (hcuo *HighlightedCommentUpdateOne) SaveX(ctx context.Context) *HighlightedComment {
	node, err := hcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hcuo *HighlightedCommentUpdateOne) Exec(ctx context.Context) error {
	_, err := hcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcuo *HighlightedCommentUpdateOne) ExecX(ctx context.Context) {
	if err := hcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hcuo *HighlightedCommentUpdateOne) sqlSave(ctx context.Context) (_node *HighlightedComment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   highlightedcomment.Table,
			Columns: highlightedcomment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: highlightedcomment.FieldID,
			},
		},
	}
	id, ok := hcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HighlightedComment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, highlightedcomment.FieldID)
		for _, f := range fields {
			if !highlightedcomment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != highlightedcomment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hcuo.mutation.CommentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: highlightedcomment.FieldCommentID,
		})
	}
	if value, ok := hcuo.mutation.Body(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: highlightedcomment.FieldBody,
		})
	}
	if value, ok := hcuo.mutation.Author(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: highlightedcomment.FieldAuthor,
		})
	}
	if value, ok := hcuo.mutation.Flair(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: highlightedcomment.FieldFlair,
		})
	}
	if value, ok := hcuo.mutation.ParentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: highlightedcomment.FieldParentID,
		})
	}
	if value, ok := hcuo.mutation.Link(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: highlightedcomment.FieldLink,
		})
	}
	if value, ok := hcuo.mutation.AuthorType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: highlightedcomment.FieldAuthorType,
		})
	}
	if value, ok := hcuo.mutation.Timestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: highlightedcomment.FieldTimestamp,
		})
	}
	_node = &HighlightedComment{config: hcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{highlightedcomment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
