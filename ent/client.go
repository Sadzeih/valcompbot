// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/Sadzeih/valcompbot/ent/migrate"
	"github.com/google/uuid"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/Sadzeih/valcompbot/ent/highlightedcomment"
	"github.com/Sadzeih/valcompbot/ent/pickemsevent"
	"github.com/Sadzeih/valcompbot/ent/pinnedcomment"
	"github.com/Sadzeih/valcompbot/ent/scheduledmatch"
	"github.com/Sadzeih/valcompbot/ent/trackedevent"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// HighlightedComment is the client for interacting with the HighlightedComment builders.
	HighlightedComment *HighlightedCommentClient
	// PickemsEvent is the client for interacting with the PickemsEvent builders.
	PickemsEvent *PickemsEventClient
	// PinnedComment is the client for interacting with the PinnedComment builders.
	PinnedComment *PinnedCommentClient
	// ScheduledMatch is the client for interacting with the ScheduledMatch builders.
	ScheduledMatch *ScheduledMatchClient
	// TrackedEvent is the client for interacting with the TrackedEvent builders.
	TrackedEvent *TrackedEventClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.HighlightedComment = NewHighlightedCommentClient(c.config)
	c.PickemsEvent = NewPickemsEventClient(c.config)
	c.PinnedComment = NewPinnedCommentClient(c.config)
	c.ScheduledMatch = NewScheduledMatchClient(c.config)
	c.TrackedEvent = NewTrackedEventClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		HighlightedComment: NewHighlightedCommentClient(cfg),
		PickemsEvent:       NewPickemsEventClient(cfg),
		PinnedComment:      NewPinnedCommentClient(cfg),
		ScheduledMatch:     NewScheduledMatchClient(cfg),
		TrackedEvent:       NewTrackedEventClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		HighlightedComment: NewHighlightedCommentClient(cfg),
		PickemsEvent:       NewPickemsEventClient(cfg),
		PinnedComment:      NewPinnedCommentClient(cfg),
		ScheduledMatch:     NewScheduledMatchClient(cfg),
		TrackedEvent:       NewTrackedEventClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		HighlightedComment.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.HighlightedComment.Use(hooks...)
	c.PickemsEvent.Use(hooks...)
	c.PinnedComment.Use(hooks...)
	c.ScheduledMatch.Use(hooks...)
	c.TrackedEvent.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.HighlightedComment.Intercept(interceptors...)
	c.PickemsEvent.Intercept(interceptors...)
	c.PinnedComment.Intercept(interceptors...)
	c.ScheduledMatch.Intercept(interceptors...)
	c.TrackedEvent.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *HighlightedCommentMutation:
		return c.HighlightedComment.mutate(ctx, m)
	case *PickemsEventMutation:
		return c.PickemsEvent.mutate(ctx, m)
	case *PinnedCommentMutation:
		return c.PinnedComment.mutate(ctx, m)
	case *ScheduledMatchMutation:
		return c.ScheduledMatch.mutate(ctx, m)
	case *TrackedEventMutation:
		return c.TrackedEvent.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// HighlightedCommentClient is a client for the HighlightedComment schema.
type HighlightedCommentClient struct {
	config
}

// NewHighlightedCommentClient returns a client for the HighlightedComment from the given config.
func NewHighlightedCommentClient(c config) *HighlightedCommentClient {
	return &HighlightedCommentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `highlightedcomment.Hooks(f(g(h())))`.
func (c *HighlightedCommentClient) Use(hooks ...Hook) {
	c.hooks.HighlightedComment = append(c.hooks.HighlightedComment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `highlightedcomment.Intercept(f(g(h())))`.
func (c *HighlightedCommentClient) Intercept(interceptors ...Interceptor) {
	c.inters.HighlightedComment = append(c.inters.HighlightedComment, interceptors...)
}

// Create returns a builder for creating a HighlightedComment entity.
func (c *HighlightedCommentClient) Create() *HighlightedCommentCreate {
	mutation := newHighlightedCommentMutation(c.config, OpCreate)
	return &HighlightedCommentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HighlightedComment entities.
func (c *HighlightedCommentClient) CreateBulk(builders ...*HighlightedCommentCreate) *HighlightedCommentCreateBulk {
	return &HighlightedCommentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HighlightedCommentClient) MapCreateBulk(slice any, setFunc func(*HighlightedCommentCreate, int)) *HighlightedCommentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HighlightedCommentCreateBulk{err: fmt.Errorf("calling to HighlightedCommentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HighlightedCommentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HighlightedCommentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HighlightedComment.
func (c *HighlightedCommentClient) Update() *HighlightedCommentUpdate {
	mutation := newHighlightedCommentMutation(c.config, OpUpdate)
	return &HighlightedCommentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HighlightedCommentClient) UpdateOne(hc *HighlightedComment) *HighlightedCommentUpdateOne {
	mutation := newHighlightedCommentMutation(c.config, OpUpdateOne, withHighlightedComment(hc))
	return &HighlightedCommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HighlightedCommentClient) UpdateOneID(id uuid.UUID) *HighlightedCommentUpdateOne {
	mutation := newHighlightedCommentMutation(c.config, OpUpdateOne, withHighlightedCommentID(id))
	return &HighlightedCommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HighlightedComment.
func (c *HighlightedCommentClient) Delete() *HighlightedCommentDelete {
	mutation := newHighlightedCommentMutation(c.config, OpDelete)
	return &HighlightedCommentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HighlightedCommentClient) DeleteOne(hc *HighlightedComment) *HighlightedCommentDeleteOne {
	return c.DeleteOneID(hc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HighlightedCommentClient) DeleteOneID(id uuid.UUID) *HighlightedCommentDeleteOne {
	builder := c.Delete().Where(highlightedcomment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HighlightedCommentDeleteOne{builder}
}

// Query returns a query builder for HighlightedComment.
func (c *HighlightedCommentClient) Query() *HighlightedCommentQuery {
	return &HighlightedCommentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHighlightedComment},
		inters: c.Interceptors(),
	}
}

// Get returns a HighlightedComment entity by its id.
func (c *HighlightedCommentClient) Get(ctx context.Context, id uuid.UUID) (*HighlightedComment, error) {
	return c.Query().Where(highlightedcomment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HighlightedCommentClient) GetX(ctx context.Context, id uuid.UUID) *HighlightedComment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *HighlightedCommentClient) Hooks() []Hook {
	return c.hooks.HighlightedComment
}

// Interceptors returns the client interceptors.
func (c *HighlightedCommentClient) Interceptors() []Interceptor {
	return c.inters.HighlightedComment
}

func (c *HighlightedCommentClient) mutate(ctx context.Context, m *HighlightedCommentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HighlightedCommentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HighlightedCommentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HighlightedCommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HighlightedCommentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HighlightedComment mutation op: %q", m.Op())
	}
}

// PickemsEventClient is a client for the PickemsEvent schema.
type PickemsEventClient struct {
	config
}

// NewPickemsEventClient returns a client for the PickemsEvent from the given config.
func NewPickemsEventClient(c config) *PickemsEventClient {
	return &PickemsEventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pickemsevent.Hooks(f(g(h())))`.
func (c *PickemsEventClient) Use(hooks ...Hook) {
	c.hooks.PickemsEvent = append(c.hooks.PickemsEvent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `pickemsevent.Intercept(f(g(h())))`.
func (c *PickemsEventClient) Intercept(interceptors ...Interceptor) {
	c.inters.PickemsEvent = append(c.inters.PickemsEvent, interceptors...)
}

// Create returns a builder for creating a PickemsEvent entity.
func (c *PickemsEventClient) Create() *PickemsEventCreate {
	mutation := newPickemsEventMutation(c.config, OpCreate)
	return &PickemsEventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PickemsEvent entities.
func (c *PickemsEventClient) CreateBulk(builders ...*PickemsEventCreate) *PickemsEventCreateBulk {
	return &PickemsEventCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PickemsEventClient) MapCreateBulk(slice any, setFunc func(*PickemsEventCreate, int)) *PickemsEventCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PickemsEventCreateBulk{err: fmt.Errorf("calling to PickemsEventClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PickemsEventCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PickemsEventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PickemsEvent.
func (c *PickemsEventClient) Update() *PickemsEventUpdate {
	mutation := newPickemsEventMutation(c.config, OpUpdate)
	return &PickemsEventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PickemsEventClient) UpdateOne(pe *PickemsEvent) *PickemsEventUpdateOne {
	mutation := newPickemsEventMutation(c.config, OpUpdateOne, withPickemsEvent(pe))
	return &PickemsEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PickemsEventClient) UpdateOneID(id uuid.UUID) *PickemsEventUpdateOne {
	mutation := newPickemsEventMutation(c.config, OpUpdateOne, withPickemsEventID(id))
	return &PickemsEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PickemsEvent.
func (c *PickemsEventClient) Delete() *PickemsEventDelete {
	mutation := newPickemsEventMutation(c.config, OpDelete)
	return &PickemsEventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PickemsEventClient) DeleteOne(pe *PickemsEvent) *PickemsEventDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PickemsEventClient) DeleteOneID(id uuid.UUID) *PickemsEventDeleteOne {
	builder := c.Delete().Where(pickemsevent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PickemsEventDeleteOne{builder}
}

// Query returns a query builder for PickemsEvent.
func (c *PickemsEventClient) Query() *PickemsEventQuery {
	return &PickemsEventQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePickemsEvent},
		inters: c.Interceptors(),
	}
}

// Get returns a PickemsEvent entity by its id.
func (c *PickemsEventClient) Get(ctx context.Context, id uuid.UUID) (*PickemsEvent, error) {
	return c.Query().Where(pickemsevent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PickemsEventClient) GetX(ctx context.Context, id uuid.UUID) *PickemsEvent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PickemsEventClient) Hooks() []Hook {
	return c.hooks.PickemsEvent
}

// Interceptors returns the client interceptors.
func (c *PickemsEventClient) Interceptors() []Interceptor {
	return c.inters.PickemsEvent
}

func (c *PickemsEventClient) mutate(ctx context.Context, m *PickemsEventMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PickemsEventCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PickemsEventUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PickemsEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PickemsEventDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PickemsEvent mutation op: %q", m.Op())
	}
}

// PinnedCommentClient is a client for the PinnedComment schema.
type PinnedCommentClient struct {
	config
}

// NewPinnedCommentClient returns a client for the PinnedComment from the given config.
func NewPinnedCommentClient(c config) *PinnedCommentClient {
	return &PinnedCommentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pinnedcomment.Hooks(f(g(h())))`.
func (c *PinnedCommentClient) Use(hooks ...Hook) {
	c.hooks.PinnedComment = append(c.hooks.PinnedComment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `pinnedcomment.Intercept(f(g(h())))`.
func (c *PinnedCommentClient) Intercept(interceptors ...Interceptor) {
	c.inters.PinnedComment = append(c.inters.PinnedComment, interceptors...)
}

// Create returns a builder for creating a PinnedComment entity.
func (c *PinnedCommentClient) Create() *PinnedCommentCreate {
	mutation := newPinnedCommentMutation(c.config, OpCreate)
	return &PinnedCommentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PinnedComment entities.
func (c *PinnedCommentClient) CreateBulk(builders ...*PinnedCommentCreate) *PinnedCommentCreateBulk {
	return &PinnedCommentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PinnedCommentClient) MapCreateBulk(slice any, setFunc func(*PinnedCommentCreate, int)) *PinnedCommentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PinnedCommentCreateBulk{err: fmt.Errorf("calling to PinnedCommentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PinnedCommentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PinnedCommentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PinnedComment.
func (c *PinnedCommentClient) Update() *PinnedCommentUpdate {
	mutation := newPinnedCommentMutation(c.config, OpUpdate)
	return &PinnedCommentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PinnedCommentClient) UpdateOne(pc *PinnedComment) *PinnedCommentUpdateOne {
	mutation := newPinnedCommentMutation(c.config, OpUpdateOne, withPinnedComment(pc))
	return &PinnedCommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PinnedCommentClient) UpdateOneID(id uuid.UUID) *PinnedCommentUpdateOne {
	mutation := newPinnedCommentMutation(c.config, OpUpdateOne, withPinnedCommentID(id))
	return &PinnedCommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PinnedComment.
func (c *PinnedCommentClient) Delete() *PinnedCommentDelete {
	mutation := newPinnedCommentMutation(c.config, OpDelete)
	return &PinnedCommentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PinnedCommentClient) DeleteOne(pc *PinnedComment) *PinnedCommentDeleteOne {
	return c.DeleteOneID(pc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PinnedCommentClient) DeleteOneID(id uuid.UUID) *PinnedCommentDeleteOne {
	builder := c.Delete().Where(pinnedcomment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PinnedCommentDeleteOne{builder}
}

// Query returns a query builder for PinnedComment.
func (c *PinnedCommentClient) Query() *PinnedCommentQuery {
	return &PinnedCommentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePinnedComment},
		inters: c.Interceptors(),
	}
}

// Get returns a PinnedComment entity by its id.
func (c *PinnedCommentClient) Get(ctx context.Context, id uuid.UUID) (*PinnedComment, error) {
	return c.Query().Where(pinnedcomment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PinnedCommentClient) GetX(ctx context.Context, id uuid.UUID) *PinnedComment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PinnedCommentClient) Hooks() []Hook {
	return c.hooks.PinnedComment
}

// Interceptors returns the client interceptors.
func (c *PinnedCommentClient) Interceptors() []Interceptor {
	return c.inters.PinnedComment
}

func (c *PinnedCommentClient) mutate(ctx context.Context, m *PinnedCommentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PinnedCommentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PinnedCommentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PinnedCommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PinnedCommentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PinnedComment mutation op: %q", m.Op())
	}
}

// ScheduledMatchClient is a client for the ScheduledMatch schema.
type ScheduledMatchClient struct {
	config
}

// NewScheduledMatchClient returns a client for the ScheduledMatch from the given config.
func NewScheduledMatchClient(c config) *ScheduledMatchClient {
	return &ScheduledMatchClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `scheduledmatch.Hooks(f(g(h())))`.
func (c *ScheduledMatchClient) Use(hooks ...Hook) {
	c.hooks.ScheduledMatch = append(c.hooks.ScheduledMatch, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `scheduledmatch.Intercept(f(g(h())))`.
func (c *ScheduledMatchClient) Intercept(interceptors ...Interceptor) {
	c.inters.ScheduledMatch = append(c.inters.ScheduledMatch, interceptors...)
}

// Create returns a builder for creating a ScheduledMatch entity.
func (c *ScheduledMatchClient) Create() *ScheduledMatchCreate {
	mutation := newScheduledMatchMutation(c.config, OpCreate)
	return &ScheduledMatchCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ScheduledMatch entities.
func (c *ScheduledMatchClient) CreateBulk(builders ...*ScheduledMatchCreate) *ScheduledMatchCreateBulk {
	return &ScheduledMatchCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ScheduledMatchClient) MapCreateBulk(slice any, setFunc func(*ScheduledMatchCreate, int)) *ScheduledMatchCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ScheduledMatchCreateBulk{err: fmt.Errorf("calling to ScheduledMatchClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ScheduledMatchCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ScheduledMatchCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ScheduledMatch.
func (c *ScheduledMatchClient) Update() *ScheduledMatchUpdate {
	mutation := newScheduledMatchMutation(c.config, OpUpdate)
	return &ScheduledMatchUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScheduledMatchClient) UpdateOne(sm *ScheduledMatch) *ScheduledMatchUpdateOne {
	mutation := newScheduledMatchMutation(c.config, OpUpdateOne, withScheduledMatch(sm))
	return &ScheduledMatchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScheduledMatchClient) UpdateOneID(id uuid.UUID) *ScheduledMatchUpdateOne {
	mutation := newScheduledMatchMutation(c.config, OpUpdateOne, withScheduledMatchID(id))
	return &ScheduledMatchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ScheduledMatch.
func (c *ScheduledMatchClient) Delete() *ScheduledMatchDelete {
	mutation := newScheduledMatchMutation(c.config, OpDelete)
	return &ScheduledMatchDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ScheduledMatchClient) DeleteOne(sm *ScheduledMatch) *ScheduledMatchDeleteOne {
	return c.DeleteOneID(sm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ScheduledMatchClient) DeleteOneID(id uuid.UUID) *ScheduledMatchDeleteOne {
	builder := c.Delete().Where(scheduledmatch.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScheduledMatchDeleteOne{builder}
}

// Query returns a query builder for ScheduledMatch.
func (c *ScheduledMatchClient) Query() *ScheduledMatchQuery {
	return &ScheduledMatchQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeScheduledMatch},
		inters: c.Interceptors(),
	}
}

// Get returns a ScheduledMatch entity by its id.
func (c *ScheduledMatchClient) Get(ctx context.Context, id uuid.UUID) (*ScheduledMatch, error) {
	return c.Query().Where(scheduledmatch.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScheduledMatchClient) GetX(ctx context.Context, id uuid.UUID) *ScheduledMatch {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ScheduledMatchClient) Hooks() []Hook {
	return c.hooks.ScheduledMatch
}

// Interceptors returns the client interceptors.
func (c *ScheduledMatchClient) Interceptors() []Interceptor {
	return c.inters.ScheduledMatch
}

func (c *ScheduledMatchClient) mutate(ctx context.Context, m *ScheduledMatchMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ScheduledMatchCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ScheduledMatchUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ScheduledMatchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ScheduledMatchDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ScheduledMatch mutation op: %q", m.Op())
	}
}

// TrackedEventClient is a client for the TrackedEvent schema.
type TrackedEventClient struct {
	config
}

// NewTrackedEventClient returns a client for the TrackedEvent from the given config.
func NewTrackedEventClient(c config) *TrackedEventClient {
	return &TrackedEventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `trackedevent.Hooks(f(g(h())))`.
func (c *TrackedEventClient) Use(hooks ...Hook) {
	c.hooks.TrackedEvent = append(c.hooks.TrackedEvent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `trackedevent.Intercept(f(g(h())))`.
func (c *TrackedEventClient) Intercept(interceptors ...Interceptor) {
	c.inters.TrackedEvent = append(c.inters.TrackedEvent, interceptors...)
}

// Create returns a builder for creating a TrackedEvent entity.
func (c *TrackedEventClient) Create() *TrackedEventCreate {
	mutation := newTrackedEventMutation(c.config, OpCreate)
	return &TrackedEventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TrackedEvent entities.
func (c *TrackedEventClient) CreateBulk(builders ...*TrackedEventCreate) *TrackedEventCreateBulk {
	return &TrackedEventCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TrackedEventClient) MapCreateBulk(slice any, setFunc func(*TrackedEventCreate, int)) *TrackedEventCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TrackedEventCreateBulk{err: fmt.Errorf("calling to TrackedEventClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TrackedEventCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TrackedEventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TrackedEvent.
func (c *TrackedEventClient) Update() *TrackedEventUpdate {
	mutation := newTrackedEventMutation(c.config, OpUpdate)
	return &TrackedEventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TrackedEventClient) UpdateOne(te *TrackedEvent) *TrackedEventUpdateOne {
	mutation := newTrackedEventMutation(c.config, OpUpdateOne, withTrackedEvent(te))
	return &TrackedEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TrackedEventClient) UpdateOneID(id uuid.UUID) *TrackedEventUpdateOne {
	mutation := newTrackedEventMutation(c.config, OpUpdateOne, withTrackedEventID(id))
	return &TrackedEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TrackedEvent.
func (c *TrackedEventClient) Delete() *TrackedEventDelete {
	mutation := newTrackedEventMutation(c.config, OpDelete)
	return &TrackedEventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TrackedEventClient) DeleteOne(te *TrackedEvent) *TrackedEventDeleteOne {
	return c.DeleteOneID(te.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TrackedEventClient) DeleteOneID(id uuid.UUID) *TrackedEventDeleteOne {
	builder := c.Delete().Where(trackedevent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TrackedEventDeleteOne{builder}
}

// Query returns a query builder for TrackedEvent.
func (c *TrackedEventClient) Query() *TrackedEventQuery {
	return &TrackedEventQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTrackedEvent},
		inters: c.Interceptors(),
	}
}

// Get returns a TrackedEvent entity by its id.
func (c *TrackedEventClient) Get(ctx context.Context, id uuid.UUID) (*TrackedEvent, error) {
	return c.Query().Where(trackedevent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TrackedEventClient) GetX(ctx context.Context, id uuid.UUID) *TrackedEvent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TrackedEventClient) Hooks() []Hook {
	return c.hooks.TrackedEvent
}

// Interceptors returns the client interceptors.
func (c *TrackedEventClient) Interceptors() []Interceptor {
	return c.inters.TrackedEvent
}

func (c *TrackedEventClient) mutate(ctx context.Context, m *TrackedEventMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TrackedEventCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TrackedEventUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TrackedEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TrackedEventDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TrackedEvent mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		HighlightedComment, PickemsEvent, PinnedComment, ScheduledMatch,
		TrackedEvent []ent.Hook
	}
	inters struct {
		HighlightedComment, PickemsEvent, PinnedComment, ScheduledMatch,
		TrackedEvent []ent.Interceptor
	}
)
