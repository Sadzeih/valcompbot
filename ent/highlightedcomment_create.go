// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Sadzeih/valcompbot/ent/highlightedcomment"
	"github.com/google/uuid"
)

// HighlightedCommentCreate is the builder for creating a HighlightedComment entity.
type HighlightedCommentCreate struct {
	config
	mutation *HighlightedCommentMutation
	hooks    []Hook
}

// SetCommentID sets the "comment_id" field.
func (hcc *HighlightedCommentCreate) SetCommentID(s string) *HighlightedCommentCreate {
	hcc.mutation.SetCommentID(s)
	return hcc
}

// SetBody sets the "body" field.
func (hcc *HighlightedCommentCreate) SetBody(s string) *HighlightedCommentCreate {
	hcc.mutation.SetBody(s)
	return hcc
}

// SetAuthor sets the "author" field.
func (hcc *HighlightedCommentCreate) SetAuthor(s string) *HighlightedCommentCreate {
	hcc.mutation.SetAuthor(s)
	return hcc
}

// SetAuthorRole sets the "author_role" field.
func (hcc *HighlightedCommentCreate) SetAuthorRole(s string) *HighlightedCommentCreate {
	hcc.mutation.SetAuthorRole(s)
	return hcc
}

// SetParentID sets the "parent_id" field.
func (hcc *HighlightedCommentCreate) SetParentID(s string) *HighlightedCommentCreate {
	hcc.mutation.SetParentID(s)
	return hcc
}

// SetLink sets the "link" field.
func (hcc *HighlightedCommentCreate) SetLink(s string) *HighlightedCommentCreate {
	hcc.mutation.SetLink(s)
	return hcc
}

// SetAuthorType sets the "author_type" field.
func (hcc *HighlightedCommentCreate) SetAuthorType(s string) *HighlightedCommentCreate {
	hcc.mutation.SetAuthorType(s)
	return hcc
}

// SetID sets the "id" field.
func (hcc *HighlightedCommentCreate) SetID(u uuid.UUID) *HighlightedCommentCreate {
	hcc.mutation.SetID(u)
	return hcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (hcc *HighlightedCommentCreate) SetNillableID(u *uuid.UUID) *HighlightedCommentCreate {
	if u != nil {
		hcc.SetID(*u)
	}
	return hcc
}

// Mutation returns the HighlightedCommentMutation object of the builder.
func (hcc *HighlightedCommentCreate) Mutation() *HighlightedCommentMutation {
	return hcc.mutation
}

// Save creates the HighlightedComment in the database.
func (hcc *HighlightedCommentCreate) Save(ctx context.Context) (*HighlightedComment, error) {
	var (
		err  error
		node *HighlightedComment
	)
	hcc.defaults()
	if len(hcc.hooks) == 0 {
		if err = hcc.check(); err != nil {
			return nil, err
		}
		node, err = hcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HighlightedCommentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hcc.check(); err != nil {
				return nil, err
			}
			hcc.mutation = mutation
			if node, err = hcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(hcc.hooks) - 1; i >= 0; i-- {
			if hcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hcc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, hcc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*HighlightedComment)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from HighlightedCommentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (hcc *HighlightedCommentCreate) SaveX(ctx context.Context) *HighlightedComment {
	v, err := hcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcc *HighlightedCommentCreate) Exec(ctx context.Context) error {
	_, err := hcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcc *HighlightedCommentCreate) ExecX(ctx context.Context) {
	if err := hcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hcc *HighlightedCommentCreate) defaults() {
	if _, ok := hcc.mutation.ID(); !ok {
		v := highlightedcomment.DefaultID()
		hcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hcc *HighlightedCommentCreate) check() error {
	if _, ok := hcc.mutation.CommentID(); !ok {
		return &ValidationError{Name: "comment_id", err: errors.New(`ent: missing required field "HighlightedComment.comment_id"`)}
	}
	if _, ok := hcc.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`ent: missing required field "HighlightedComment.body"`)}
	}
	if _, ok := hcc.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required field "HighlightedComment.author"`)}
	}
	if _, ok := hcc.mutation.AuthorRole(); !ok {
		return &ValidationError{Name: "author_role", err: errors.New(`ent: missing required field "HighlightedComment.author_role"`)}
	}
	if _, ok := hcc.mutation.ParentID(); !ok {
		return &ValidationError{Name: "parent_id", err: errors.New(`ent: missing required field "HighlightedComment.parent_id"`)}
	}
	if _, ok := hcc.mutation.Link(); !ok {
		return &ValidationError{Name: "link", err: errors.New(`ent: missing required field "HighlightedComment.link"`)}
	}
	if _, ok := hcc.mutation.AuthorType(); !ok {
		return &ValidationError{Name: "author_type", err: errors.New(`ent: missing required field "HighlightedComment.author_type"`)}
	}
	return nil
}

func (hcc *HighlightedCommentCreate) sqlSave(ctx context.Context) (*HighlightedComment, error) {
	_node, _spec := hcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (hcc *HighlightedCommentCreate) createSpec() (*HighlightedComment, *sqlgraph.CreateSpec) {
	var (
		_node = &HighlightedComment{config: hcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: highlightedcomment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: highlightedcomment.FieldID,
			},
		}
	)
	if id, ok := hcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := hcc.mutation.CommentID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: highlightedcomment.FieldCommentID,
		})
		_node.CommentID = value
	}
	if value, ok := hcc.mutation.Body(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: highlightedcomment.FieldBody,
		})
		_node.Body = value
	}
	if value, ok := hcc.mutation.Author(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: highlightedcomment.FieldAuthor,
		})
		_node.Author = value
	}
	if value, ok := hcc.mutation.AuthorRole(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: highlightedcomment.FieldAuthorRole,
		})
		_node.AuthorRole = value
	}
	if value, ok := hcc.mutation.ParentID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: highlightedcomment.FieldParentID,
		})
		_node.ParentID = value
	}
	if value, ok := hcc.mutation.Link(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: highlightedcomment.FieldLink,
		})
		_node.Link = value
	}
	if value, ok := hcc.mutation.AuthorType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: highlightedcomment.FieldAuthorType,
		})
		_node.AuthorType = value
	}
	return _node, _spec
}

// HighlightedCommentCreateBulk is the builder for creating many HighlightedComment entities in bulk.
type HighlightedCommentCreateBulk struct {
	config
	builders []*HighlightedCommentCreate
}

// Save creates the HighlightedComment entities in the database.
func (hccb *HighlightedCommentCreateBulk) Save(ctx context.Context) ([]*HighlightedComment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hccb.builders))
	nodes := make([]*HighlightedComment, len(hccb.builders))
	mutators := make([]Mutator, len(hccb.builders))
	for i := range hccb.builders {
		func(i int, root context.Context) {
			builder := hccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HighlightedCommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hccb *HighlightedCommentCreateBulk) SaveX(ctx context.Context) []*HighlightedComment {
	v, err := hccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hccb *HighlightedCommentCreateBulk) Exec(ctx context.Context) error {
	_, err := hccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hccb *HighlightedCommentCreateBulk) ExecX(ctx context.Context) {
	if err := hccb.Exec(ctx); err != nil {
		panic(err)
	}
}
