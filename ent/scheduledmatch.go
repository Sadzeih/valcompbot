// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Sadzeih/valcompbot/ent/scheduledmatch"
	"github.com/google/uuid"
)

// ScheduledMatch is the model entity for the ScheduledMatch schema.
type ScheduledMatch struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// MatchID holds the value of the "match_id" field.
	MatchID string `json:"match_id,omitempty"`
	// DoneAt holds the value of the "done_at" field.
	DoneAt time.Time `json:"done_at,omitempty"`
	// PostedAt holds the value of the "posted_at" field.
	PostedAt     time.Time `json:"posted_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScheduledMatch) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scheduledmatch.FieldMatchID:
			values[i] = new(sql.NullString)
		case scheduledmatch.FieldDoneAt, scheduledmatch.FieldPostedAt:
			values[i] = new(sql.NullTime)
		case scheduledmatch.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScheduledMatch fields.
func (sm *ScheduledMatch) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scheduledmatch.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sm.ID = *value
			}
		case scheduledmatch.FieldMatchID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field match_id", values[i])
			} else if value.Valid {
				sm.MatchID = value.String
			}
		case scheduledmatch.FieldDoneAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field done_at", values[i])
			} else if value.Valid {
				sm.DoneAt = value.Time
			}
		case scheduledmatch.FieldPostedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field posted_at", values[i])
			} else if value.Valid {
				sm.PostedAt = value.Time
			}
		default:
			sm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScheduledMatch.
// This includes values selected through modifiers, order, etc.
func (sm *ScheduledMatch) Value(name string) (ent.Value, error) {
	return sm.selectValues.Get(name)
}

// Update returns a builder for updating this ScheduledMatch.
// Note that you need to call ScheduledMatch.Unwrap() before calling this method if this ScheduledMatch
// was returned from a transaction, and the transaction was committed or rolled back.
func (sm *ScheduledMatch) Update() *ScheduledMatchUpdateOne {
	return NewScheduledMatchClient(sm.config).UpdateOne(sm)
}

// Unwrap unwraps the ScheduledMatch entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sm *ScheduledMatch) Unwrap() *ScheduledMatch {
	_tx, ok := sm.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScheduledMatch is not a transactional entity")
	}
	sm.config.driver = _tx.drv
	return sm
}

// String implements the fmt.Stringer.
func (sm *ScheduledMatch) String() string {
	var builder strings.Builder
	builder.WriteString("ScheduledMatch(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sm.ID))
	builder.WriteString("match_id=")
	builder.WriteString(sm.MatchID)
	builder.WriteString(", ")
	builder.WriteString("done_at=")
	builder.WriteString(sm.DoneAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("posted_at=")
	builder.WriteString(sm.PostedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ScheduledMatches is a parsable slice of ScheduledMatch.
type ScheduledMatches []*ScheduledMatch
