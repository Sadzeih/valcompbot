// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Sadzeih/valcompbot/ent/pinnedcomment"
	"github.com/google/uuid"
)

// PinnedComment is the model entity for the PinnedComment schema.
type PinnedComment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CommentID holds the value of the "comment_id" field.
	CommentID string `json:"comment_id,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	ParentID string `json:"parent_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PinnedComment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case pinnedcomment.FieldCommentID, pinnedcomment.FieldParentID:
			values[i] = new(sql.NullString)
		case pinnedcomment.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PinnedComment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PinnedComment fields.
func (pc *PinnedComment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pinnedcomment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pc.ID = *value
			}
		case pinnedcomment.FieldCommentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment_id", values[i])
			} else if value.Valid {
				pc.CommentID = value.String
			}
		case pinnedcomment.FieldParentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				pc.ParentID = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this PinnedComment.
// Note that you need to call PinnedComment.Unwrap() before calling this method if this PinnedComment
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *PinnedComment) Update() *PinnedCommentUpdateOne {
	return (&PinnedCommentClient{config: pc.config}).UpdateOne(pc)
}

// Unwrap unwraps the PinnedComment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pc *PinnedComment) Unwrap() *PinnedComment {
	_tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("ent: PinnedComment is not a transactional entity")
	}
	pc.config.driver = _tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *PinnedComment) String() string {
	var builder strings.Builder
	builder.WriteString("PinnedComment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pc.ID))
	builder.WriteString("comment_id=")
	builder.WriteString(pc.CommentID)
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(pc.ParentID)
	builder.WriteByte(')')
	return builder.String()
}

// PinnedComments is a parsable slice of PinnedComment.
type PinnedComments []*PinnedComment

func (pc PinnedComments) config(cfg config) {
	for _i := range pc {
		pc[_i].config = cfg
	}
}
