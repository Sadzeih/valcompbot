// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Sadzeih/valcompbot/ent/pinnedcomment"
	"github.com/google/uuid"
)

// PinnedCommentCreate is the builder for creating a PinnedComment entity.
type PinnedCommentCreate struct {
	config
	mutation *PinnedCommentMutation
	hooks    []Hook
}

// SetCommentID sets the "comment_id" field.
func (pcc *PinnedCommentCreate) SetCommentID(s string) *PinnedCommentCreate {
	pcc.mutation.SetCommentID(s)
	return pcc
}

// SetParentID sets the "parent_id" field.
func (pcc *PinnedCommentCreate) SetParentID(s string) *PinnedCommentCreate {
	pcc.mutation.SetParentID(s)
	return pcc
}

// SetID sets the "id" field.
func (pcc *PinnedCommentCreate) SetID(u uuid.UUID) *PinnedCommentCreate {
	pcc.mutation.SetID(u)
	return pcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pcc *PinnedCommentCreate) SetNillableID(u *uuid.UUID) *PinnedCommentCreate {
	if u != nil {
		pcc.SetID(*u)
	}
	return pcc
}

// Mutation returns the PinnedCommentMutation object of the builder.
func (pcc *PinnedCommentCreate) Mutation() *PinnedCommentMutation {
	return pcc.mutation
}

// Save creates the PinnedComment in the database.
func (pcc *PinnedCommentCreate) Save(ctx context.Context) (*PinnedComment, error) {
	var (
		err  error
		node *PinnedComment
	)
	pcc.defaults()
	if len(pcc.hooks) == 0 {
		if err = pcc.check(); err != nil {
			return nil, err
		}
		node, err = pcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PinnedCommentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcc.check(); err != nil {
				return nil, err
			}
			pcc.mutation = mutation
			if node, err = pcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pcc.hooks) - 1; i >= 0; i-- {
			if pcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pcc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pcc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PinnedComment)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PinnedCommentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pcc *PinnedCommentCreate) SaveX(ctx context.Context) *PinnedComment {
	v, err := pcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcc *PinnedCommentCreate) Exec(ctx context.Context) error {
	_, err := pcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcc *PinnedCommentCreate) ExecX(ctx context.Context) {
	if err := pcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcc *PinnedCommentCreate) defaults() {
	if _, ok := pcc.mutation.ID(); !ok {
		v := pinnedcomment.DefaultID()
		pcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcc *PinnedCommentCreate) check() error {
	if _, ok := pcc.mutation.CommentID(); !ok {
		return &ValidationError{Name: "comment_id", err: errors.New(`ent: missing required field "PinnedComment.comment_id"`)}
	}
	if _, ok := pcc.mutation.ParentID(); !ok {
		return &ValidationError{Name: "parent_id", err: errors.New(`ent: missing required field "PinnedComment.parent_id"`)}
	}
	return nil
}

func (pcc *PinnedCommentCreate) sqlSave(ctx context.Context) (*PinnedComment, error) {
	_node, _spec := pcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (pcc *PinnedCommentCreate) createSpec() (*PinnedComment, *sqlgraph.CreateSpec) {
	var (
		_node = &PinnedComment{config: pcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pinnedcomment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pinnedcomment.FieldID,
			},
		}
	)
	if id, ok := pcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pcc.mutation.CommentID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pinnedcomment.FieldCommentID,
		})
		_node.CommentID = value
	}
	if value, ok := pcc.mutation.ParentID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pinnedcomment.FieldParentID,
		})
		_node.ParentID = value
	}
	return _node, _spec
}

// PinnedCommentCreateBulk is the builder for creating many PinnedComment entities in bulk.
type PinnedCommentCreateBulk struct {
	config
	builders []*PinnedCommentCreate
}

// Save creates the PinnedComment entities in the database.
func (pccb *PinnedCommentCreateBulk) Save(ctx context.Context) ([]*PinnedComment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pccb.builders))
	nodes := make([]*PinnedComment, len(pccb.builders))
	mutators := make([]Mutator, len(pccb.builders))
	for i := range pccb.builders {
		func(i int, root context.Context) {
			builder := pccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PinnedCommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pccb *PinnedCommentCreateBulk) SaveX(ctx context.Context) []*PinnedComment {
	v, err := pccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pccb *PinnedCommentCreateBulk) Exec(ctx context.Context) error {
	_, err := pccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pccb *PinnedCommentCreateBulk) ExecX(ctx context.Context) {
	if err := pccb.Exec(ctx); err != nil {
		panic(err)
	}
}
