// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/Sadzeih/valcompbot/ent/highlightedcomment"
	"github.com/Sadzeih/valcompbot/ent/pickemsevent"
	"github.com/Sadzeih/valcompbot/ent/pinnedcomment"
	"github.com/Sadzeih/valcompbot/ent/predicate"
	"github.com/Sadzeih/valcompbot/ent/trackedevent"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeHighlightedComment = "HighlightedComment"
	TypePickemsEvent       = "PickemsEvent"
	TypePinnedComment      = "PinnedComment"
	TypeTrackedEvent       = "TrackedEvent"
)

// HighlightedCommentMutation represents an operation that mutates the HighlightedComment nodes in the graph.
type HighlightedCommentMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	comment_id    *string
	body          *string
	author        *string
	flair         *string
	parent_id     *string
	link          *string
	author_type   *string
	timestamp     *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*HighlightedComment, error)
	predicates    []predicate.HighlightedComment
}

var _ ent.Mutation = (*HighlightedCommentMutation)(nil)

// highlightedcommentOption allows management of the mutation configuration using functional options.
type highlightedcommentOption func(*HighlightedCommentMutation)

// newHighlightedCommentMutation creates new mutation for the HighlightedComment entity.
func newHighlightedCommentMutation(c config, op Op, opts ...highlightedcommentOption) *HighlightedCommentMutation {
	m := &HighlightedCommentMutation{
		config:        c,
		op:            op,
		typ:           TypeHighlightedComment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHighlightedCommentID sets the ID field of the mutation.
func withHighlightedCommentID(id uuid.UUID) highlightedcommentOption {
	return func(m *HighlightedCommentMutation) {
		var (
			err   error
			once  sync.Once
			value *HighlightedComment
		)
		m.oldValue = func(ctx context.Context) (*HighlightedComment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().HighlightedComment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHighlightedComment sets the old HighlightedComment of the mutation.
func withHighlightedComment(node *HighlightedComment) highlightedcommentOption {
	return func(m *HighlightedCommentMutation) {
		m.oldValue = func(context.Context) (*HighlightedComment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HighlightedCommentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HighlightedCommentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of HighlightedComment entities.
func (m *HighlightedCommentMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HighlightedCommentMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HighlightedCommentMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().HighlightedComment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCommentID sets the "comment_id" field.
func (m *HighlightedCommentMutation) SetCommentID(s string) {
	m.comment_id = &s
}

// CommentID returns the value of the "comment_id" field in the mutation.
func (m *HighlightedCommentMutation) CommentID() (r string, exists bool) {
	v := m.comment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCommentID returns the old "comment_id" field's value of the HighlightedComment entity.
// If the HighlightedComment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HighlightedCommentMutation) OldCommentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommentID: %w", err)
	}
	return oldValue.CommentID, nil
}

// ResetCommentID resets all changes to the "comment_id" field.
func (m *HighlightedCommentMutation) ResetCommentID() {
	m.comment_id = nil
}

// SetBody sets the "body" field.
func (m *HighlightedCommentMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *HighlightedCommentMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the HighlightedComment entity.
// If the HighlightedComment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HighlightedCommentMutation) OldBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ResetBody resets all changes to the "body" field.
func (m *HighlightedCommentMutation) ResetBody() {
	m.body = nil
}

// SetAuthor sets the "author" field.
func (m *HighlightedCommentMutation) SetAuthor(s string) {
	m.author = &s
}

// Author returns the value of the "author" field in the mutation.
func (m *HighlightedCommentMutation) Author() (r string, exists bool) {
	v := m.author
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthor returns the old "author" field's value of the HighlightedComment entity.
// If the HighlightedComment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HighlightedCommentMutation) OldAuthor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthor: %w", err)
	}
	return oldValue.Author, nil
}

// ResetAuthor resets all changes to the "author" field.
func (m *HighlightedCommentMutation) ResetAuthor() {
	m.author = nil
}

// SetFlair sets the "flair" field.
func (m *HighlightedCommentMutation) SetFlair(s string) {
	m.flair = &s
}

// Flair returns the value of the "flair" field in the mutation.
func (m *HighlightedCommentMutation) Flair() (r string, exists bool) {
	v := m.flair
	if v == nil {
		return
	}
	return *v, true
}

// OldFlair returns the old "flair" field's value of the HighlightedComment entity.
// If the HighlightedComment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HighlightedCommentMutation) OldFlair(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFlair is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFlair requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFlair: %w", err)
	}
	return oldValue.Flair, nil
}

// ResetFlair resets all changes to the "flair" field.
func (m *HighlightedCommentMutation) ResetFlair() {
	m.flair = nil
}

// SetParentID sets the "parent_id" field.
func (m *HighlightedCommentMutation) SetParentID(s string) {
	m.parent_id = &s
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *HighlightedCommentMutation) ParentID() (r string, exists bool) {
	v := m.parent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the HighlightedComment entity.
// If the HighlightedComment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HighlightedCommentMutation) OldParentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *HighlightedCommentMutation) ResetParentID() {
	m.parent_id = nil
}

// SetLink sets the "link" field.
func (m *HighlightedCommentMutation) SetLink(s string) {
	m.link = &s
}

// Link returns the value of the "link" field in the mutation.
func (m *HighlightedCommentMutation) Link() (r string, exists bool) {
	v := m.link
	if v == nil {
		return
	}
	return *v, true
}

// OldLink returns the old "link" field's value of the HighlightedComment entity.
// If the HighlightedComment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HighlightedCommentMutation) OldLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLink: %w", err)
	}
	return oldValue.Link, nil
}

// ResetLink resets all changes to the "link" field.
func (m *HighlightedCommentMutation) ResetLink() {
	m.link = nil
}

// SetAuthorType sets the "author_type" field.
func (m *HighlightedCommentMutation) SetAuthorType(s string) {
	m.author_type = &s
}

// AuthorType returns the value of the "author_type" field in the mutation.
func (m *HighlightedCommentMutation) AuthorType() (r string, exists bool) {
	v := m.author_type
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthorType returns the old "author_type" field's value of the HighlightedComment entity.
// If the HighlightedComment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HighlightedCommentMutation) OldAuthorType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthorType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthorType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthorType: %w", err)
	}
	return oldValue.AuthorType, nil
}

// ResetAuthorType resets all changes to the "author_type" field.
func (m *HighlightedCommentMutation) ResetAuthorType() {
	m.author_type = nil
}

// SetTimestamp sets the "timestamp" field.
func (m *HighlightedCommentMutation) SetTimestamp(t time.Time) {
	m.timestamp = &t
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *HighlightedCommentMutation) Timestamp() (r time.Time, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the HighlightedComment entity.
// If the HighlightedComment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HighlightedCommentMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *HighlightedCommentMutation) ResetTimestamp() {
	m.timestamp = nil
}

// Where appends a list predicates to the HighlightedCommentMutation builder.
func (m *HighlightedCommentMutation) Where(ps ...predicate.HighlightedComment) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *HighlightedCommentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (HighlightedComment).
func (m *HighlightedCommentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HighlightedCommentMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.comment_id != nil {
		fields = append(fields, highlightedcomment.FieldCommentID)
	}
	if m.body != nil {
		fields = append(fields, highlightedcomment.FieldBody)
	}
	if m.author != nil {
		fields = append(fields, highlightedcomment.FieldAuthor)
	}
	if m.flair != nil {
		fields = append(fields, highlightedcomment.FieldFlair)
	}
	if m.parent_id != nil {
		fields = append(fields, highlightedcomment.FieldParentID)
	}
	if m.link != nil {
		fields = append(fields, highlightedcomment.FieldLink)
	}
	if m.author_type != nil {
		fields = append(fields, highlightedcomment.FieldAuthorType)
	}
	if m.timestamp != nil {
		fields = append(fields, highlightedcomment.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HighlightedCommentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case highlightedcomment.FieldCommentID:
		return m.CommentID()
	case highlightedcomment.FieldBody:
		return m.Body()
	case highlightedcomment.FieldAuthor:
		return m.Author()
	case highlightedcomment.FieldFlair:
		return m.Flair()
	case highlightedcomment.FieldParentID:
		return m.ParentID()
	case highlightedcomment.FieldLink:
		return m.Link()
	case highlightedcomment.FieldAuthorType:
		return m.AuthorType()
	case highlightedcomment.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HighlightedCommentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case highlightedcomment.FieldCommentID:
		return m.OldCommentID(ctx)
	case highlightedcomment.FieldBody:
		return m.OldBody(ctx)
	case highlightedcomment.FieldAuthor:
		return m.OldAuthor(ctx)
	case highlightedcomment.FieldFlair:
		return m.OldFlair(ctx)
	case highlightedcomment.FieldParentID:
		return m.OldParentID(ctx)
	case highlightedcomment.FieldLink:
		return m.OldLink(ctx)
	case highlightedcomment.FieldAuthorType:
		return m.OldAuthorType(ctx)
	case highlightedcomment.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown HighlightedComment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HighlightedCommentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case highlightedcomment.FieldCommentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommentID(v)
		return nil
	case highlightedcomment.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	case highlightedcomment.FieldAuthor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthor(v)
		return nil
	case highlightedcomment.FieldFlair:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFlair(v)
		return nil
	case highlightedcomment.FieldParentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case highlightedcomment.FieldLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLink(v)
		return nil
	case highlightedcomment.FieldAuthorType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthorType(v)
		return nil
	case highlightedcomment.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown HighlightedComment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HighlightedCommentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HighlightedCommentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HighlightedCommentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown HighlightedComment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HighlightedCommentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HighlightedCommentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HighlightedCommentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown HighlightedComment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HighlightedCommentMutation) ResetField(name string) error {
	switch name {
	case highlightedcomment.FieldCommentID:
		m.ResetCommentID()
		return nil
	case highlightedcomment.FieldBody:
		m.ResetBody()
		return nil
	case highlightedcomment.FieldAuthor:
		m.ResetAuthor()
		return nil
	case highlightedcomment.FieldFlair:
		m.ResetFlair()
		return nil
	case highlightedcomment.FieldParentID:
		m.ResetParentID()
		return nil
	case highlightedcomment.FieldLink:
		m.ResetLink()
		return nil
	case highlightedcomment.FieldAuthorType:
		m.ResetAuthorType()
		return nil
	case highlightedcomment.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown HighlightedComment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HighlightedCommentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HighlightedCommentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HighlightedCommentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HighlightedCommentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HighlightedCommentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HighlightedCommentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HighlightedCommentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown HighlightedComment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HighlightedCommentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown HighlightedComment edge %s", name)
}

// PickemsEventMutation represents an operation that mutates the PickemsEvent nodes in the graph.
type PickemsEventMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	event_id      *int
	addevent_id   *int
	timestamp     *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*PickemsEvent, error)
	predicates    []predicate.PickemsEvent
}

var _ ent.Mutation = (*PickemsEventMutation)(nil)

// pickemseventOption allows management of the mutation configuration using functional options.
type pickemseventOption func(*PickemsEventMutation)

// newPickemsEventMutation creates new mutation for the PickemsEvent entity.
func newPickemsEventMutation(c config, op Op, opts ...pickemseventOption) *PickemsEventMutation {
	m := &PickemsEventMutation{
		config:        c,
		op:            op,
		typ:           TypePickemsEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPickemsEventID sets the ID field of the mutation.
func withPickemsEventID(id uuid.UUID) pickemseventOption {
	return func(m *PickemsEventMutation) {
		var (
			err   error
			once  sync.Once
			value *PickemsEvent
		)
		m.oldValue = func(ctx context.Context) (*PickemsEvent, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PickemsEvent.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPickemsEvent sets the old PickemsEvent of the mutation.
func withPickemsEvent(node *PickemsEvent) pickemseventOption {
	return func(m *PickemsEventMutation) {
		m.oldValue = func(context.Context) (*PickemsEvent, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PickemsEventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PickemsEventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PickemsEvent entities.
func (m *PickemsEventMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PickemsEventMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PickemsEventMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PickemsEvent.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEventID sets the "event_id" field.
func (m *PickemsEventMutation) SetEventID(i int) {
	m.event_id = &i
	m.addevent_id = nil
}

// EventID returns the value of the "event_id" field in the mutation.
func (m *PickemsEventMutation) EventID() (r int, exists bool) {
	v := m.event_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEventID returns the old "event_id" field's value of the PickemsEvent entity.
// If the PickemsEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PickemsEventMutation) OldEventID(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventID: %w", err)
	}
	return oldValue.EventID, nil
}

// AddEventID adds i to the "event_id" field.
func (m *PickemsEventMutation) AddEventID(i int) {
	if m.addevent_id != nil {
		*m.addevent_id += i
	} else {
		m.addevent_id = &i
	}
}

// AddedEventID returns the value that was added to the "event_id" field in this mutation.
func (m *PickemsEventMutation) AddedEventID() (r int, exists bool) {
	v := m.addevent_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearEventID clears the value of the "event_id" field.
func (m *PickemsEventMutation) ClearEventID() {
	m.event_id = nil
	m.addevent_id = nil
	m.clearedFields[pickemsevent.FieldEventID] = struct{}{}
}

// EventIDCleared returns if the "event_id" field was cleared in this mutation.
func (m *PickemsEventMutation) EventIDCleared() bool {
	_, ok := m.clearedFields[pickemsevent.FieldEventID]
	return ok
}

// ResetEventID resets all changes to the "event_id" field.
func (m *PickemsEventMutation) ResetEventID() {
	m.event_id = nil
	m.addevent_id = nil
	delete(m.clearedFields, pickemsevent.FieldEventID)
}

// SetTimestamp sets the "timestamp" field.
func (m *PickemsEventMutation) SetTimestamp(t time.Time) {
	m.timestamp = &t
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *PickemsEventMutation) Timestamp() (r time.Time, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the PickemsEvent entity.
// If the PickemsEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PickemsEventMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *PickemsEventMutation) ResetTimestamp() {
	m.timestamp = nil
}

// Where appends a list predicates to the PickemsEventMutation builder.
func (m *PickemsEventMutation) Where(ps ...predicate.PickemsEvent) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PickemsEventMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PickemsEvent).
func (m *PickemsEventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PickemsEventMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.event_id != nil {
		fields = append(fields, pickemsevent.FieldEventID)
	}
	if m.timestamp != nil {
		fields = append(fields, pickemsevent.FieldTimestamp)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PickemsEventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pickemsevent.FieldEventID:
		return m.EventID()
	case pickemsevent.FieldTimestamp:
		return m.Timestamp()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PickemsEventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pickemsevent.FieldEventID:
		return m.OldEventID(ctx)
	case pickemsevent.FieldTimestamp:
		return m.OldTimestamp(ctx)
	}
	return nil, fmt.Errorf("unknown PickemsEvent field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PickemsEventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pickemsevent.FieldEventID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventID(v)
		return nil
	case pickemsevent.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	}
	return fmt.Errorf("unknown PickemsEvent field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PickemsEventMutation) AddedFields() []string {
	var fields []string
	if m.addevent_id != nil {
		fields = append(fields, pickemsevent.FieldEventID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PickemsEventMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case pickemsevent.FieldEventID:
		return m.AddedEventID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PickemsEventMutation) AddField(name string, value ent.Value) error {
	switch name {
	case pickemsevent.FieldEventID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEventID(v)
		return nil
	}
	return fmt.Errorf("unknown PickemsEvent numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PickemsEventMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(pickemsevent.FieldEventID) {
		fields = append(fields, pickemsevent.FieldEventID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PickemsEventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PickemsEventMutation) ClearField(name string) error {
	switch name {
	case pickemsevent.FieldEventID:
		m.ClearEventID()
		return nil
	}
	return fmt.Errorf("unknown PickemsEvent nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PickemsEventMutation) ResetField(name string) error {
	switch name {
	case pickemsevent.FieldEventID:
		m.ResetEventID()
		return nil
	case pickemsevent.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	}
	return fmt.Errorf("unknown PickemsEvent field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PickemsEventMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PickemsEventMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PickemsEventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PickemsEventMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PickemsEventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PickemsEventMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PickemsEventMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PickemsEvent unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PickemsEventMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PickemsEvent edge %s", name)
}

// PinnedCommentMutation represents an operation that mutates the PinnedComment nodes in the graph.
type PinnedCommentMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	comment_id    *string
	parent_id     *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*PinnedComment, error)
	predicates    []predicate.PinnedComment
}

var _ ent.Mutation = (*PinnedCommentMutation)(nil)

// pinnedcommentOption allows management of the mutation configuration using functional options.
type pinnedcommentOption func(*PinnedCommentMutation)

// newPinnedCommentMutation creates new mutation for the PinnedComment entity.
func newPinnedCommentMutation(c config, op Op, opts ...pinnedcommentOption) *PinnedCommentMutation {
	m := &PinnedCommentMutation{
		config:        c,
		op:            op,
		typ:           TypePinnedComment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPinnedCommentID sets the ID field of the mutation.
func withPinnedCommentID(id uuid.UUID) pinnedcommentOption {
	return func(m *PinnedCommentMutation) {
		var (
			err   error
			once  sync.Once
			value *PinnedComment
		)
		m.oldValue = func(ctx context.Context) (*PinnedComment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PinnedComment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPinnedComment sets the old PinnedComment of the mutation.
func withPinnedComment(node *PinnedComment) pinnedcommentOption {
	return func(m *PinnedCommentMutation) {
		m.oldValue = func(context.Context) (*PinnedComment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PinnedCommentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PinnedCommentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PinnedComment entities.
func (m *PinnedCommentMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PinnedCommentMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PinnedCommentMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PinnedComment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCommentID sets the "comment_id" field.
func (m *PinnedCommentMutation) SetCommentID(s string) {
	m.comment_id = &s
}

// CommentID returns the value of the "comment_id" field in the mutation.
func (m *PinnedCommentMutation) CommentID() (r string, exists bool) {
	v := m.comment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCommentID returns the old "comment_id" field's value of the PinnedComment entity.
// If the PinnedComment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PinnedCommentMutation) OldCommentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommentID: %w", err)
	}
	return oldValue.CommentID, nil
}

// ResetCommentID resets all changes to the "comment_id" field.
func (m *PinnedCommentMutation) ResetCommentID() {
	m.comment_id = nil
}

// SetParentID sets the "parent_id" field.
func (m *PinnedCommentMutation) SetParentID(s string) {
	m.parent_id = &s
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *PinnedCommentMutation) ParentID() (r string, exists bool) {
	v := m.parent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the PinnedComment entity.
// If the PinnedComment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PinnedCommentMutation) OldParentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *PinnedCommentMutation) ResetParentID() {
	m.parent_id = nil
}

// Where appends a list predicates to the PinnedCommentMutation builder.
func (m *PinnedCommentMutation) Where(ps ...predicate.PinnedComment) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PinnedCommentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PinnedComment).
func (m *PinnedCommentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PinnedCommentMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.comment_id != nil {
		fields = append(fields, pinnedcomment.FieldCommentID)
	}
	if m.parent_id != nil {
		fields = append(fields, pinnedcomment.FieldParentID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PinnedCommentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pinnedcomment.FieldCommentID:
		return m.CommentID()
	case pinnedcomment.FieldParentID:
		return m.ParentID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PinnedCommentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pinnedcomment.FieldCommentID:
		return m.OldCommentID(ctx)
	case pinnedcomment.FieldParentID:
		return m.OldParentID(ctx)
	}
	return nil, fmt.Errorf("unknown PinnedComment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PinnedCommentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pinnedcomment.FieldCommentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommentID(v)
		return nil
	case pinnedcomment.FieldParentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	}
	return fmt.Errorf("unknown PinnedComment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PinnedCommentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PinnedCommentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PinnedCommentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PinnedComment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PinnedCommentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PinnedCommentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PinnedCommentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PinnedComment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PinnedCommentMutation) ResetField(name string) error {
	switch name {
	case pinnedcomment.FieldCommentID:
		m.ResetCommentID()
		return nil
	case pinnedcomment.FieldParentID:
		m.ResetParentID()
		return nil
	}
	return fmt.Errorf("unknown PinnedComment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PinnedCommentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PinnedCommentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PinnedCommentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PinnedCommentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PinnedCommentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PinnedCommentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PinnedCommentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PinnedComment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PinnedCommentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PinnedComment edge %s", name)
}

// TrackedEventMutation represents an operation that mutates the TrackedEvent nodes in the graph.
type TrackedEventMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	event_id      *int
	addevent_id   *int
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TrackedEvent, error)
	predicates    []predicate.TrackedEvent
}

var _ ent.Mutation = (*TrackedEventMutation)(nil)

// trackedeventOption allows management of the mutation configuration using functional options.
type trackedeventOption func(*TrackedEventMutation)

// newTrackedEventMutation creates new mutation for the TrackedEvent entity.
func newTrackedEventMutation(c config, op Op, opts ...trackedeventOption) *TrackedEventMutation {
	m := &TrackedEventMutation{
		config:        c,
		op:            op,
		typ:           TypeTrackedEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTrackedEventID sets the ID field of the mutation.
func withTrackedEventID(id uuid.UUID) trackedeventOption {
	return func(m *TrackedEventMutation) {
		var (
			err   error
			once  sync.Once
			value *TrackedEvent
		)
		m.oldValue = func(ctx context.Context) (*TrackedEvent, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TrackedEvent.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTrackedEvent sets the old TrackedEvent of the mutation.
func withTrackedEvent(node *TrackedEvent) trackedeventOption {
	return func(m *TrackedEventMutation) {
		m.oldValue = func(context.Context) (*TrackedEvent, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TrackedEventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TrackedEventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TrackedEvent entities.
func (m *TrackedEventMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TrackedEventMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TrackedEventMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TrackedEvent.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEventID sets the "event_id" field.
func (m *TrackedEventMutation) SetEventID(i int) {
	m.event_id = &i
	m.addevent_id = nil
}

// EventID returns the value of the "event_id" field in the mutation.
func (m *TrackedEventMutation) EventID() (r int, exists bool) {
	v := m.event_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEventID returns the old "event_id" field's value of the TrackedEvent entity.
// If the TrackedEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackedEventMutation) OldEventID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventID: %w", err)
	}
	return oldValue.EventID, nil
}

// AddEventID adds i to the "event_id" field.
func (m *TrackedEventMutation) AddEventID(i int) {
	if m.addevent_id != nil {
		*m.addevent_id += i
	} else {
		m.addevent_id = &i
	}
}

// AddedEventID returns the value that was added to the "event_id" field in this mutation.
func (m *TrackedEventMutation) AddedEventID() (r int, exists bool) {
	v := m.addevent_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetEventID resets all changes to the "event_id" field.
func (m *TrackedEventMutation) ResetEventID() {
	m.event_id = nil
	m.addevent_id = nil
}

// SetName sets the "name" field.
func (m *TrackedEventMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TrackedEventMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TrackedEvent entity.
// If the TrackedEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackedEventMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TrackedEventMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the TrackedEventMutation builder.
func (m *TrackedEventMutation) Where(ps ...predicate.TrackedEvent) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TrackedEventMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TrackedEvent).
func (m *TrackedEventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TrackedEventMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.event_id != nil {
		fields = append(fields, trackedevent.FieldEventID)
	}
	if m.name != nil {
		fields = append(fields, trackedevent.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TrackedEventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case trackedevent.FieldEventID:
		return m.EventID()
	case trackedevent.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TrackedEventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case trackedevent.FieldEventID:
		return m.OldEventID(ctx)
	case trackedevent.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown TrackedEvent field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TrackedEventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case trackedevent.FieldEventID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventID(v)
		return nil
	case trackedevent.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown TrackedEvent field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TrackedEventMutation) AddedFields() []string {
	var fields []string
	if m.addevent_id != nil {
		fields = append(fields, trackedevent.FieldEventID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TrackedEventMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case trackedevent.FieldEventID:
		return m.AddedEventID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TrackedEventMutation) AddField(name string, value ent.Value) error {
	switch name {
	case trackedevent.FieldEventID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEventID(v)
		return nil
	}
	return fmt.Errorf("unknown TrackedEvent numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TrackedEventMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TrackedEventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TrackedEventMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TrackedEvent nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TrackedEventMutation) ResetField(name string) error {
	switch name {
	case trackedevent.FieldEventID:
		m.ResetEventID()
		return nil
	case trackedevent.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown TrackedEvent field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TrackedEventMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TrackedEventMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TrackedEventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TrackedEventMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TrackedEventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TrackedEventMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TrackedEventMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TrackedEvent unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TrackedEventMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TrackedEvent edge %s", name)
}
