// Code generated by ent, DO NOT EDIT.

package pickemsevent

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Sadzeih/valcompbot/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldLTE(FieldID, id))
}

// EventID applies equality check predicate on the "event_id" field. It's identical to EventIDEQ.
func EventID(v int) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldEQ(FieldEventID, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldEQ(FieldTimestamp, v))
}

// EventIDEQ applies the EQ predicate on the "event_id" field.
func EventIDEQ(v int) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldEQ(FieldEventID, v))
}

// EventIDNEQ applies the NEQ predicate on the "event_id" field.
func EventIDNEQ(v int) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldNEQ(FieldEventID, v))
}

// EventIDIn applies the In predicate on the "event_id" field.
func EventIDIn(vs ...int) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldIn(FieldEventID, vs...))
}

// EventIDNotIn applies the NotIn predicate on the "event_id" field.
func EventIDNotIn(vs ...int) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldNotIn(FieldEventID, vs...))
}

// EventIDGT applies the GT predicate on the "event_id" field.
func EventIDGT(v int) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldGT(FieldEventID, v))
}

// EventIDGTE applies the GTE predicate on the "event_id" field.
func EventIDGTE(v int) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldGTE(FieldEventID, v))
}

// EventIDLT applies the LT predicate on the "event_id" field.
func EventIDLT(v int) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldLT(FieldEventID, v))
}

// EventIDLTE applies the LTE predicate on the "event_id" field.
func EventIDLTE(v int) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldLTE(FieldEventID, v))
}

// EventIDIsNil applies the IsNil predicate on the "event_id" field.
func EventIDIsNil() predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldIsNull(FieldEventID))
}

// EventIDNotNil applies the NotNil predicate on the "event_id" field.
func EventIDNotNil() predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldNotNull(FieldEventID))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.FieldLTE(FieldTimestamp, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PickemsEvent) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PickemsEvent) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PickemsEvent) predicate.PickemsEvent {
	return predicate.PickemsEvent(sql.NotPredicates(p))
}
