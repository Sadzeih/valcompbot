// Code generated by ent, DO NOT EDIT.

package pinnedcomment

import (
	"entgo.io/ent/dialect/sql"
	"github.com/Sadzeih/valcompbot/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldLTE(FieldID, id))
}

// CommentID applies equality check predicate on the "comment_id" field. It's identical to CommentIDEQ.
func CommentID(v string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldEQ(FieldCommentID, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldEQ(FieldParentID, v))
}

// CommentIDEQ applies the EQ predicate on the "comment_id" field.
func CommentIDEQ(v string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldEQ(FieldCommentID, v))
}

// CommentIDNEQ applies the NEQ predicate on the "comment_id" field.
func CommentIDNEQ(v string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldNEQ(FieldCommentID, v))
}

// CommentIDIn applies the In predicate on the "comment_id" field.
func CommentIDIn(vs ...string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldIn(FieldCommentID, vs...))
}

// CommentIDNotIn applies the NotIn predicate on the "comment_id" field.
func CommentIDNotIn(vs ...string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldNotIn(FieldCommentID, vs...))
}

// CommentIDGT applies the GT predicate on the "comment_id" field.
func CommentIDGT(v string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldGT(FieldCommentID, v))
}

// CommentIDGTE applies the GTE predicate on the "comment_id" field.
func CommentIDGTE(v string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldGTE(FieldCommentID, v))
}

// CommentIDLT applies the LT predicate on the "comment_id" field.
func CommentIDLT(v string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldLT(FieldCommentID, v))
}

// CommentIDLTE applies the LTE predicate on the "comment_id" field.
func CommentIDLTE(v string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldLTE(FieldCommentID, v))
}

// CommentIDContains applies the Contains predicate on the "comment_id" field.
func CommentIDContains(v string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldContains(FieldCommentID, v))
}

// CommentIDHasPrefix applies the HasPrefix predicate on the "comment_id" field.
func CommentIDHasPrefix(v string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldHasPrefix(FieldCommentID, v))
}

// CommentIDHasSuffix applies the HasSuffix predicate on the "comment_id" field.
func CommentIDHasSuffix(v string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldHasSuffix(FieldCommentID, v))
}

// CommentIDEqualFold applies the EqualFold predicate on the "comment_id" field.
func CommentIDEqualFold(v string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldEqualFold(FieldCommentID, v))
}

// CommentIDContainsFold applies the ContainsFold predicate on the "comment_id" field.
func CommentIDContainsFold(v string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldContainsFold(FieldCommentID, v))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDGT applies the GT predicate on the "parent_id" field.
func ParentIDGT(v string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldGT(FieldParentID, v))
}

// ParentIDGTE applies the GTE predicate on the "parent_id" field.
func ParentIDGTE(v string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldGTE(FieldParentID, v))
}

// ParentIDLT applies the LT predicate on the "parent_id" field.
func ParentIDLT(v string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldLT(FieldParentID, v))
}

// ParentIDLTE applies the LTE predicate on the "parent_id" field.
func ParentIDLTE(v string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldLTE(FieldParentID, v))
}

// ParentIDContains applies the Contains predicate on the "parent_id" field.
func ParentIDContains(v string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldContains(FieldParentID, v))
}

// ParentIDHasPrefix applies the HasPrefix predicate on the "parent_id" field.
func ParentIDHasPrefix(v string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldHasPrefix(FieldParentID, v))
}

// ParentIDHasSuffix applies the HasSuffix predicate on the "parent_id" field.
func ParentIDHasSuffix(v string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldHasSuffix(FieldParentID, v))
}

// ParentIDEqualFold applies the EqualFold predicate on the "parent_id" field.
func ParentIDEqualFold(v string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldEqualFold(FieldParentID, v))
}

// ParentIDContainsFold applies the ContainsFold predicate on the "parent_id" field.
func ParentIDContainsFold(v string) predicate.PinnedComment {
	return predicate.PinnedComment(sql.FieldContainsFold(FieldParentID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PinnedComment) predicate.PinnedComment {
	return predicate.PinnedComment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PinnedComment) predicate.PinnedComment {
	return predicate.PinnedComment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PinnedComment) predicate.PinnedComment {
	return predicate.PinnedComment(sql.NotPredicates(p))
}
